class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      page: 'home',
      user: {}
    };
    App.prototype.handleNext = App.prototype.handleNext.bind(this);
  }

  handleNext(e) {
    e.preventDefault(); // store input field name and value
    // as a key value pair in an array of objects

    var $form = $(e.target);
    var formData = $form.serializeArray();
    var newUser = Object.assign({}, this.state.user);

    if (formData.length > 0) {
      formData.forEach(input => {
        newUser[input["name"]] = input["value"];
      });
    }

    console.log(newUser); // set current page state based on where next is clicked

    var currentPage = this.state.page;
    var nextPage;

    if (currentPage === 'home') {
      nextPage = 'form one';
    }

    if (currentPage === 'form one') {
      nextPage = 'form two'; // api call to post data from form one

      axios.post('/formOne', {
        name: newUser["name"],
        email: newUser["email"],
        password: newUser["password"]
      }).then(response => {
        console.log(response); //set state with the id from the database
      }).catch(error => {
        console.log(error);
      });
    }

    if (currentPage === 'form two') {
      nextPage = 'form three'; // api call to post data from form two

      axios.post('/formTwo', {
        id: newUser[id],
        addressOne: newUser["addressOne"],
        addressTwo: newUser["addressTwo"],
        city: newUser["city"],
        state: newUser["state"],
        zip: newUser["zip"],
        tel: newUser["tel"]
      }).then(response => {
        console.log(response.data);
      }).catch(error => {
        console.log(error);
      });
    }

    if (currentPage === 'form three') {
      nextPage = 'confirmation'; // api call to post data from form three

      axios.post('/formThree', {
        id: newUser[id],
        creditCard: newUser["creditCard"],
        cvv: newUser["cvv"],
        expiration: newUser["expiration"],
        billingZip: newUser["billingZip"]
      }).then(response => {
        console.log(response.data);
      }).catch(error => {
        console.log(error);
      });
    }

    if (currentPage === 'confirmation') {
      nextPage = 'home';
      newUser = {};
    }

    this.setState({
      page: nextPage,
      user: newUser
    });
  }

  render() {
    var currentPage = 'home';

    if (this.state.page === 'home') {
      return /*#__PURE__*/React.createElement("div", {
        className: "checkout"
      }, /*#__PURE__*/React.createElement("p", {
        className: "checkout-cart"
      }, "Cart:"), /*#__PURE__*/React.createElement("img", {
        src: "quantum.png",
        alt: "nuka cola quantum",
        height: "100",
        className: "checkout-image"
      }), /*#__PURE__*/React.createElement("p", {
        className: "checkout-quantity"
      }, "Quantity: 12"), /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: "checkout-button",
        onClick: e => this.handleNext(e)
      }, "Checkout"));
    } else if (this.state.page === 'form one') {
      return /*#__PURE__*/React.createElement(FormOne, null);
    } else if (this.state.page === 'form two') {
      return /*#__PURE__*/React.createElement(FormTwo, null);
    } else if (this.state.page === 'form three') {
      return /*#__PURE__*/React.createElement(FormThree, null);
    } else if (this.state.page === 'confirmation') {
      return /*#__PURE__*/React.createElement(Confirmation, {
        userData: this.state.user
      });
    }
  }

} // form one component


var FormOne = function (props) {
  var currentPage = 'form one';
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
    className: "form form-one",
    onSubmit: e => App.prototype.handleNext(e)
  }, /*#__PURE__*/React.createElement("input", {
    type: "text",
    name: "name",
    id: "name",
    maxLength: "30",
    placeholder: "Name"
  }), /*#__PURE__*/React.createElement("input", {
    type: "email",
    name: "email",
    id: "email",
    placeholder: "Email Address"
  }), /*#__PURE__*/React.createElement("input", {
    type: "password",
    name: "password",
    id: "password",
    maxLength: "30",
    placeholder: "Password"
  }), /*#__PURE__*/React.createElement("button", {
    type: "submit",
    name: "form-one-next",
    className: "next-button"
  }, "Next")));
}; // form two component


var FormTwo = function (props) {
  var currentPage = 'form two';
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
    className: "form form-two",
    onSubmit: e => App.prototype.handleNext(e)
  }, /*#__PURE__*/React.createElement("input", {
    type: "text",
    name: "addressOne",
    id: "addressOne",
    placeholder: "Address Line 1"
  }), /*#__PURE__*/React.createElement("input", {
    type: "text",
    name: "addressTwo",
    id: "addressTwo",
    placeholder: "Address Line 2"
  }), /*#__PURE__*/React.createElement("input", {
    type: "text",
    name: "city",
    id: "city",
    maxLength: "30",
    placeholder: "City"
  }), /*#__PURE__*/React.createElement("input", {
    type: "text",
    name: "state",
    id: "state",
    maxLength: "23",
    placeholder: "State"
  }), /*#__PURE__*/React.createElement("input", {
    type: "number",
    name: "zip",
    id: "zip",
    maxLength: "12",
    placeholder: "Zip Code"
  }), /*#__PURE__*/React.createElement("input", {
    type: "tel",
    name: "tel",
    id: "tel",
    placeholder: "Phone"
  }), /*#__PURE__*/React.createElement("button", {
    type: "submit",
    name: "form-two-next",
    className: "next-button"
  }, "Next")));
}; // form three component


var FormThree = function (props) {
  var currentPage = 'form three';
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
    className: "form form-two",
    onSubmit: e => App.prototype.handleNext(e)
  }, /*#__PURE__*/React.createElement("input", {
    type: "number",
    name: "creditCard",
    id: "creditCard",
    maxLength: "20",
    placeholder: "Credit Card"
  }), /*#__PURE__*/React.createElement("input", {
    type: "date",
    name: "expiration",
    id: "expiration",
    placeholder: "Expiration Date"
  }), /*#__PURE__*/React.createElement("input", {
    type: "number ",
    name: "cvv",
    id: "cvv",
    maxLength: "4",
    placeholder: "CVV"
  }), /*#__PURE__*/React.createElement("input", {
    type: "number",
    name: "billingZip",
    id: "billingZip",
    maxLength: "12",
    placeholder: "Billing Zip Code"
  }), /*#__PURE__*/React.createElement("button", {
    type: "submit",
    name: "form-three-next",
    className: "next-button"
  }, "Next")));
}; // confirmation component\


var Confirmation = function (props) {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "Contact Info"), /*#__PURE__*/React.createElement("p", null, "Name: ", props.userData.name), /*#__PURE__*/React.createElement("p", null, "Address line 1: ", props.userData.addressOne), /*#__PURE__*/React.createElement("p", null, "Address line 2: ", props.userData.addressTwo), /*#__PURE__*/React.createElement("p", null, "City: ", props.userData.city), /*#__PURE__*/React.createElement("p", null, "State: ", props.userData.state), /*#__PURE__*/React.createElement("p", null, "Zip Code: ", props.userData.zip), /*#__PURE__*/React.createElement("h3", null, "Billing Info"), /*#__PURE__*/React.createElement("p", null, "Credit Card: ", props.userData.creditCard), /*#__PURE__*/React.createElement("p", null, "CVV: ", props.userData.cvv), /*#__PURE__*/React.createElement("p", null, "Expiration Date: ", props.userData.expiration), /*#__PURE__*/React.createElement("p", null, "Billing Zip: ", props.userData.billingZip), /*#__PURE__*/React.createElement("button", {
    type: "button",
    name: "confirmation-button",
    className: "confirmation-button",
    onClick: e => App.prototype.handleNext(e)
  }, "Purchase"));
}; // export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,